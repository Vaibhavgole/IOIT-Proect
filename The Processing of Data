import os
import pandas as pd
filepath="/home/vaibhavgole/Desktop/Project-I"
os.chdir(filepath)
file=pd.read_excel("DataFile.xlsx",sheet_name="Sheet1",na_values=" ")
#print(file)


#######################    Accissing the Required Data    ########################


def deleterow(i):
    for j in range(i):
        teacherfile.drop(teacherfile.index[j], inplace=True)
        


teacherfile=pd.read_excel("DataFile.xlsx",sheet_name="old Jr. Sup. order Nov. 2019", na_values=" ")
#deleterow(3)
to_delete=[0,1,2]
teacherfile.drop(teacherfile.index[to_delete], inplace=True)

colname=teacherfile.loc[3,:]
colname[7]="Favorable Dates"
teacherfile.columns=colname
teacherfile=teacherfile.drop('Jr. Sup. Sign', axis=1)
teacherfile=teacherfile.drop(index=3,axis=0)
teacherfile=teacherfile.set_index("Sr. No.",drop=False)


reqfile=teacherfile.loc[1.0:116.0,["Name of the faculty","Total duties","Favorable Dates"]]
reqfile["Favorable Dates"]=pd.to_datetime(reqfile["Favorable Dates"])
print(reqfile)

##############          Getting the Exam Dates

date=file.loc[:,['Day/Date','Year','Time','Total Jr. Sup. Req.']]
weekdays=['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
for i in range(len(weekdays)):
    weekdays[i]=weekdays[i].title()    
print(weekdays)
datesofexam=[]
dateswithshift=[]
examdate=[]
dayduty=[]
for i in range(len(date['Day/Date'])):
    j=date.loc[i][0]
    if str(j) == 'nan':
        continue
    else:
        k=j
        j=j.split(" ")[0].title()
        if j in weekdays:
            shift=int(date.iloc[i][2][0])
            if shift == 1:    
                l=k.split(" ")[1].strip() + 'm'
            elif shift == 2:
                l=k.split(" ")[1].strip() + 'e'
            dat=k.split(" ")[1].strip()
            dayduty.append((l,date.iloc[i][3]))
            dateswithshift.append(l)
            datesofexam.append(dat)
            con=date.iloc[i][0]+date.iloc[i][2]
            examdate.append(con)
        else:
            continue


#############################        Processing of Data        


class Teacher():
    def __init__(self,name ,noOfDuties):
        self.name = name
        self.noOfDuties = noOfDuties
        self.alloteddate=['12/12/2020']
    def putdata(self):
        print("Teacher Name : ",self.name, "\nTeacher Dutfavdt.iloc[cou][16]favdt.iloc[cou][16]ies : ",self.noOfDuties)


supreq=[]
for i in range(0,len(date['Total Jr. Sup. Req.']),1):
    if type(date['Total Jr. Sup. Req.'][i]) is int:
        supreq.append(date['Total Jr. Sup. Req.'][i])
        
        
thr=[]
for z in range(1,len(reqfile['Name of the faculty'])+1):
    thr.append(Teacher(reqfile.loc[z][0], reqfile.loc[z][1]))


toblocks=[]
maxi=max(supreq)
for jrsup in range(1,max(supreq)+1,1):
    toblocks.append(jrsup)


day=[]
for x in range(0,len(dateswithshift),1):
   day.append([dateswithshift[x],[]])
   for ne in range(0,maxi,1):
       day[x][1].append(" ")

forteacher=[]
teacherlist=[]
teacherwithduties=[]
reqfile["Favorable Dates"].fillna("0",inplace=True)
for u in range(1,len(reqfile['Name of the faculty'])+1,1):
    if reqfile["Favorable Dates"][u] != str(0):
        forteacher.append([reqfile['Name of the faculty'][u],[]])
        teacherlist.append(reqfile['Name of the faculty'][u])
        teacherwithduties.append((reqfile['Name of the faculty'][u], reqfile["Total duties"][u], reqfile["Favorable Dates"][u]))
    
    


#=================================    Let's assign the dates


mylist=list(dict.fromkeys(datesofexam))
datesofexam=mylist


fav=[]
favdt=pd.read_excel("DataFile.xlsx",sheet_name="Sheet3", na_values=" ")
favdt['Favorable Dates'].fillna(0,inplace=True)
for i in range(0,len(favdt),1):
    if favdt['Favorable Dates'][i] != 0:
        date=favdt['Favorable Dates'][i].split("/")
        dayi=date[2]
        month=date[1]
        year=date[0]
        date=dayi+"/"+month+"/"+year
        nam=favdt['Unnamed: 1'][i]
        if nam in teacherlist:
            place=teacherlist.index(nam)
            dutiesreq=teacherwithduties[place][1]
        fav.append((favdt['Unnamed: 1'][i],date,dutiesreq))
    else:
        continue



def teach(ch):
    if ch in teacherlist:
        for ijk in range(len(fav)):
            if str(fav[ijk][0]) == str(ch):
                return [fav[ijk][0], str(fav[ijk][1]), fav[ijk][2]]
    else:
        return 0


"""
def givestart(pos,p):           #pos = position of favdt in list and p = half of dutiesreq to teacher
    lb=0                        #lb = lower bound of index of datesofexam
    ub=len(datesofexam)-1       #ub = upper bound 
    if (pos >= p) and (ub-pos)>=p:
        return pos-p
    elif pos+1 <= p:
        return lb
    else:
        return ub
"""    

def check(mylist,date,name,dutyreq):
    if (date in dateswithshift):
        index=dateswithshift.index(date)
        count=maxi-day[index][1].count(" ")
     #   print("/nline 163: count=",count,"index = ",index)
        
        if count < dayduty[index][1]:
            day[index][1][count]=name
            if name in teacherlist:
                forteacher[teacherlist.index(name)][1].append(day[index][0])
        else:
            return 0
              
        
    

def checkavl(date1,date2):
    if (date1 in dateswithshift):
        index=dateswithshift.index(date1)
        counti=maxi-day[index][1].count(" ")
        if counti <= dayduty[index][1]:
            return date1
    if (date2 in dateswithshift):
        index=dateswithshift.index(date2)
        counti=maxi-day[index][1].count(" ")
        if counti <= dayduty[index][1]:
            return date2
    else:
        return -1





def allote(teacher):
    if teacher == None:
        return 0

    name=teacher[0]
    fvdt=teacher[1]
    dutiesreq=teacher[2]
    pos=datesofexam.index(fvdt)
    i=j=pos
    date1=fvdt+'m'
    date2=fvdt+'e'
    getdate=checkavl(date1, date2)
    if getdate != -1:
        check(dateswithshift, getdate,name,dutiesreq)
    #print("\n pos = ",pos)
    chk=0
    while chk <= dutiesreq:
        i=i-1
        j=j+1
        if i <0 and j > len(datesofexam):
            break
        if i >= 0:
            if name in teacherlist:
                chk=len(forteacher[teacherlist.index(name)][1])
#             print("\n\tchk = ",chk,"dutiesreq = ",dutiesreq)
            if chk > dutiesreq:
                break
            fvdt=datesofexam[i]
            date1=fvdt+'m'
            date2=fvdt+'e'
            getdate=checkavl(date1,date2)
            if getdate != -1:
                check(dateswithshift, getdate,name,dutiesreq)
        if j< len(datesofexam):
            if name in teacherlist:
                chk=len(forteacher[teacherlist.index(name)][1])
  #              print("\n\tchk = ",chk,"dutiesreq = ",dutiesreq)
            if chk > dutiesreq:
                break
 #           print("\n\tj= ",j)
            fvdt=datesofexam[j]
            date1=fvdt+'m'
            date2=fvdt+'e'
            getdate=checkavl(date1,date2)
            if getdate != -1:
                check(dateswithshift, getdate,name,dutiesreq)
        

            
import random
allotedteacher=[]
i=0
"""
choiceteach=random.choice(teacherlist)
li=teach(choiceteach)
allote(li)
allotedteacher.append(choiceteach)
"""
ak=0
for shady in range(len(dateswithshift)):
    ak=ak+dayduty[shady][1]
        
terminate=0
while terminate <= ak:
    terminate=0
    gin=0
    for gabbi in range(len(dateswithshift)) :
        gin=maxi-day[gabbi][1].count(" ")
        terminate=terminate+gin
        
        
        
    print("Terminat", terminate)  
    choiceteach=random.choice(teacherlist)
    li=teach(choiceteach)
    if choiceteach in allotedteacher:
        continue
    elif li == 0:
#       print("Got a successful Result")
        allotedteacher.append(choiceteach)
        teacherlist.remove(choiceteach)
        i=i+1
    else:
        allote(li)
        if li[0] in teacherlist:
            p=teacherlist.index(li[0])
            reqdut=teacherwithduties[p][1]
            forteacher[p][1]
        allotedteacher.append(choiceteach)
        i=i+1
















